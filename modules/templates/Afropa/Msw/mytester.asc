#
# In this file I store some usefull thing I found out.
#
# Please extend these examples.
#

// ---------------------------
*2 Wiki*
	- set the magic line in controllers/default.py -> index
	- log in as admin via web2py
	- create an account on the wiki page (this one should be admin of the wiki?)
	- create an index-file and start to work
		- learn MARKMIN

// ---------------------------
*3.1 First Steps - controller/view*

	This part is ment to get a feeling for the workflow of web2py. It ist not
	directly related to Sahana Eden project.
	
	a)
	- create a controller: controllers/mytester.py
	- create index():
		return dict()
	- create
	
# Memorize:

- for controllers returning a dict web2py will look for a corresponding
	view-file at 'application'/'controller'/'function'
	  
	therefore: .../controllers/default.py => index() will map to
	           .../views/defaul/index.html
			   
- to display a debugging toolbar: put in your view {{=response.toolbar()}}	   

- you pass info between controller and view via a dict:
	myvar = 5;
	return dict(flagword=myvar)
	
	in the view access the value via the 'flagword': {{=falgword}}
	
	- you can store also in a global like: session.flagword = 5
	- you can return all locals with" return locals() 
		(each variable will have a 'flagword' according to their name)

- always there for you are session, request, ...




- vars: things defined in the controller/view (or only the view?)
- args: things you type as URL?

- TRY: "New application wizard" (web2py admin page) - cool!

- web2py workflow (chapter 'core'):

	Models in the same folder/subfolder are executed in alphabetical order.
	=> Any variable defined in a model will be visible to other models following alphabetically, to the controllers, and to the views.

	msw: 
		- hmm, then all models and all controllers are just one single namespace ... 
		- this is (most probably) the reason for the 000_config and zzz_ files named as they are.
	

- The possible behaviors of an action (a controller function) are the following:

	Return a string                        : return 'data'
	Return a dictionary for a view         : return dict(key='value')
	Return all local variables             : return locals()
	Redirect the user to another page      : redirect(URL('other_action'))
	Return an HTTP page other than "200 OK": raise HTTP(404)
	Return a helper (for example, a FORM)  : return FORM(INPUT(_name='test'))
	(this is mostly used for Ajax callbacks and components, see chapter 12)

	When an action returns a dictionary, it may contain code generated by helpers, including forms based on database tables 
	or forms from a factory, for example:

	def index():
    	return dict(form=SQLFORM.factory(Field('name')).process())
		(all forms generated by web2py use postbacks, see chapter 3)

	from: http://127.0.0.1:7000/book/default/chapter/29/04/the-core

- in controllers: Functions that take arguments or start with a double underscore are not 
  publicly exposed and can only be called by other functions.

- Notice that the controller and the view are executed in different copies of the same environment; 
  therefore, the view does not see the controller, but it sees the models and it sees the variables 
  returned by the controller action function.
  
- The core API entities in the web2py execution environment are request, response, session, cache, 
  URL, HTTP, redirect and T. A few objects and functions, including Auth, Crud and Service, are 
  defined in "gluon/tools.py" and they need to be imported as necessary:
	from gluon.tools import Auth, Crud, Service
  However, they are imported in db.py in the scaffolding application (the clone of welcome).

session.secure()

- which tells web2py to set the session cookie to be a secure cookie. This should be set if the app 
  is going over https. By setting the session cookie to be secure, the server is asking the browser not 
  to send the session cookie back to the server unless over an https connection.
  
  The signature for define_table:

Tables are defined in the DAL via define_table:
	>>> db.define_table('person',
                    Field('name'),
                    id=id,
                    rname=None,
                    redefine=True
                    common_filter,
                    fake_migrate,
                    fields,
                    format,
                    migrate,
                    on_define,
                    plural,
                    polymodel,
                    primarykey,
                    redefine,
                    sequence_name,
                    singular,
                    table_class,
                    trigger_name)

- Lazy Tables (can be set to True): This is one of the most significant response-time performance boosts in web2py.
  
- These are the default values of a Field constructor:

	Field(fieldname, type='string', length=None, default=None,
    	required=False, requires='<default>',
      	ondelete='CASCADE', notnull=False, unique=False,
     	uploadfield=True, widget=None, label=None, comment=None,
    	writable=True, readable=True, update=None, authorize=None,
   	   	autodelete=False, represent=None, compute=None,
      	uploadfolder=None, uploadseparate=None, uploadfs=None, rname=None)

  	To avoid unwanted migrations on upgrades, we recommend that you always specify the length for string, password and upload fields.
  	=> Field('', type=string, label=T(''), comment=T(''), length=512, requires=None, ...)
	   and: writeable, readable
  
- Field(..., ondelete=...) ondelete translates into the "ON DELETE" SQL statement. 
  By default it is set to "CASCADE". This tells the database that when it deletes a record, it should also delete all records that refer to it. 
  To disable this feature, set ondelete to "NO ACTION" or "SET NULL".
  
- The view-html files are in fact parsed and translated (somehow) with/in python. In this process there seems 
  to be some kind of security check, which prevents potentially dangerous HTML-code to be 
  executed/translated (i.e. there will be an error and a ticket). This seems to even occure in code 
  in comments. There seems to be at least so caution neccessary when using <!-- --> to commtent-out things.
  It may not work.
  
  However, although indention is without significance in view-htmls, end-of-line seems to. You therefore can
  comment out in python style (in the python parts):

 {{=SQLTABLE(rows,
            headers='fieldname:capitalize',
            #truncate=100,          <===== comment
            #upload=URL('download') <===== comment
			)
 }}
  
- in queries & and | and ~ must be used for binary operations (as AND, OR, (NOT) have some restrictions of their overloading).
  ATTENTION: & and | have higher precedence than comparison operators => YOU MUST USE PARETHESES!
  (a==b)&(x>0)
  
  
- doc on reading/writing csv files:  https://docs.python.org/3/library/csv.html
  
  
- The file "gluon/dal.py" defines, among other, the following classes:
	ConnectionPool
	BaseAdapter extends ConnectionPool
	Row
	DAL
	Reference
	Table
	Expression
	Field
	Query
	Set
	Rows
  
- cats! nachbasteln!  https://www.youtube.com/watch?v=FaaltEB_v0s
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
